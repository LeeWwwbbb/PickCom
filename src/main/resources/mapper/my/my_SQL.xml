<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="my">
    <!-- 로그인 한 회원의 정보 출력 (마이페이지 회원정보 수정) -->
    <select id="memberModify" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
        SELECT MEMBER_NUM,
               MEMBER_ID,
               MEMBER_NAME,
               MEMBER_NICKNAME,
               MEMBER_PASSWD,
               MEMBER_EMAIL,
               MEMBER_RANK,
               TO_CHAR(MEMBER_REGDATE, 'YYYY/MM/DD')  MEMBER_REGDATE,
               TO_CHAR(MEMBER_LASTDATE, 'YYYY/MM/DD') MEMBER_LASTDATE,
               MEMBER_DELETE,
               MEMBER_VISITCOUNT
        FROM MEMBER
        WHERE MEMBER_NUM = #{member_num}
        ]]>
	</select>

    <!-- 회원정보 수정 전 비밀번호 확인 -->
    <select id="passwdCheck" parameterType="hashMap" resultType="String">
	<![CDATA[
        SELECT MEMBER_ID
        FROM MEMBER
        WHERE MEMBER_PASSWD = #{MEMBER_PASSWD}
          AND MEMBER_ID = #{MEMBER_ID}
        ]]>
	</select>

    <!-- 비밀번호 변경 -->
    <update id="passwdChange" parameterType="hashmap">
        UPDATE MEMBER
        SET member_passwd = #{member_passwd}
        WHERE member_id = #{member_id}
    </update>

    <update id="memberDelete">
        UPDATE MEMBER
        SET MEMBER_DELETE = true
        WHERE MEMBER_NUM = #{MEMBER_NUM}
    </update>

    <!-- 작성 게시글 목록 -->
    <select id="boardList" parameterType="hashmap" resultType="hashmap">
        <include refid="common.pagingPre"/>
        SELECT
        ROW_NUMBER() over (ORDER BY b.board_num DESC) rnum,
        TO_CHAR(b.board_createdDate, 'YYYY.MM.DD') AS board_createDate,
        b.*, m.member_nickName, m.member_name, COUNT(l.like_num) AS like_count
        FROM board b
        LEFT JOIN member m ON b.member_num = m.member_num
        LEFT JOIN `like` l ON b.board_num = l.board_num
        WHERE m.member_num = #{member_num}
        GROUP BY b.board_num ORDER BY b.board_num DESC
        <include refid="common.pagingPost"/>
	</select>

    <!-- 게시글 좋아요 목록 -->
    <select id="likeList" parameterType="hashmap" resultType="hashmap">
        <include refid="common.pagingPre"/>
        SELECT
        ROW_NUMBER() over (ORDER BY b.board_num DESC) rnum,
        TO_CHAR(b.board_createdDate, 'YYYY.MM.DD') AS board_createDate,
        b.*, m.member_nickName, m.member_name,
        COUNT(l.like_num) AS like_count
        FROM board b
        LEFT JOIN member m ON b.member_num = m.member_num
        LEFT JOIN `like` l ON b.board_num = l.board_num
        WHERE l.member_num = #{member_num}
        GROUP BY b.board_num, b.board_createdDate, m.member_nickName, m.member_name
        ORDER BY b.board_num DESC
        <include refid="common.pagingPost"/>
	</select>

    <!-- 댓글 목록 -->
    <select id="commentList" parameterType="hashmap" resultType="hashmap">
        <include refid="common.pagingPre"/>
        SELECT
        ROW_NUMBER() over (ORDER BY b.board_num DESC) rnum,
        TO_CHAR(c.comment_regDate, 'YYYY.MM.DD') AS comment_date,
        c.comment_num, c.comment_content, b.board_title, b.board_num, b.board_cate, m.member_nickName
        FROM comment c
        INNER JOIN member m ON c.member_num = m.member_num
        INNER JOIN board b ON c.board_num = b.board_num
        WHERE m.member_num = #{member_num}
        <include refid="common.pagingPost"/>
	</select>


</mapper>